// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logrecord.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logrecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logrecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logrecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logrecord_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logrecord_2eproto;
namespace logging {
class LogRecord;
class LogRecordDefaultTypeInternal;
extern LogRecordDefaultTypeInternal _LogRecord_default_instance_;
class LogRecord_Heartbeat;
class LogRecord_HeartbeatDefaultTypeInternal;
extern LogRecord_HeartbeatDefaultTypeInternal _LogRecord_Heartbeat_default_instance_;
}  // namespace logging
PROTOBUF_NAMESPACE_OPEN
template<> ::logging::LogRecord* Arena::CreateMaybeMessage<::logging::LogRecord>(Arena*);
template<> ::logging::LogRecord_Heartbeat* Arena::CreateMaybeMessage<::logging::LogRecord_Heartbeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace logging {

// ===================================================================

class LogRecord_Heartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logging.LogRecord.Heartbeat) */ {
 public:
  inline LogRecord_Heartbeat() : LogRecord_Heartbeat(nullptr) {};
  virtual ~LogRecord_Heartbeat();

  LogRecord_Heartbeat(const LogRecord_Heartbeat& from);
  LogRecord_Heartbeat(LogRecord_Heartbeat&& from) noexcept
    : LogRecord_Heartbeat() {
    *this = ::std::move(from);
  }

  inline LogRecord_Heartbeat& operator=(const LogRecord_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRecord_Heartbeat& operator=(LogRecord_Heartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRecord_Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRecord_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const LogRecord_Heartbeat*>(
               &_LogRecord_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogRecord_Heartbeat& a, LogRecord_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRecord_Heartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRecord_Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRecord_Heartbeat* New() const final {
    return CreateMaybeMessage<LogRecord_Heartbeat>(nullptr);
  }

  LogRecord_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRecord_Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRecord_Heartbeat& from);
  void MergeFrom(const LogRecord_Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRecord_Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logging.LogRecord.Heartbeat";
  }
  protected:
  explicit LogRecord_Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logrecord_2eproto);
    return ::descriptor_table_logrecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kProcessNameFieldNumber = 2,
    kUsernameFieldNumber = 5,
    kProcessStartTimeFieldNumber = 4,
    kProcessIdFieldNumber = 3,
  };
  // required string hostname = 1;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // required string process_name = 2;
  bool has_process_name() const;
  private:
  bool _internal_has_process_name() const;
  public:
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_process_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_process_name(
      std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // required string username = 5;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required int64 process_start_time = 4;
  bool has_process_start_time() const;
  private:
  bool _internal_has_process_start_time() const;
  public:
  void clear_process_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 process_start_time() const;
  void set_process_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_process_start_time() const;
  void _internal_set_process_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 process_id = 3;
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  ::PROTOBUF_NAMESPACE_ID::int32 process_id() const;
  void set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_process_id() const;
  void _internal_set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:logging.LogRecord.Heartbeat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int64 process_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_id_;
  friend struct ::TableStruct_logrecord_2eproto;
};
// -------------------------------------------------------------------

class LogRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:logging.LogRecord) */ {
 public:
  inline LogRecord() : LogRecord(nullptr) {};
  virtual ~LogRecord();

  LogRecord(const LogRecord& from);
  LogRecord(LogRecord&& from) noexcept
    : LogRecord() {
    *this = ::std::move(from);
  }

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRecord& operator=(LogRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRecord* internal_default_instance() {
    return reinterpret_cast<const LogRecord*>(
               &_LogRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogRecord& a, LogRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRecord* New() const final {
    return CreateMaybeMessage<LogRecord>(nullptr);
  }

  LogRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "logging.LogRecord";
  }
  protected:
  explicit LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logrecord_2eproto);
    return ::descriptor_table_logrecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogRecord_Heartbeat Heartbeat;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 5,
    kHeartbeatFieldNumber = 1,
    kLevelFieldNumber = 2,
    kThreadIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // required string message = 5;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::logging::LogRecord_Heartbeat& heartbeat() const;
  ::logging::LogRecord_Heartbeat* release_heartbeat();
  ::logging::LogRecord_Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::logging::LogRecord_Heartbeat* heartbeat);
  private:
  const ::logging::LogRecord_Heartbeat& _internal_heartbeat() const;
  ::logging::LogRecord_Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::logging::LogRecord_Heartbeat* heartbeat);
  ::logging::LogRecord_Heartbeat* unsafe_arena_release_heartbeat();

  // required int32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 thread_id = 3;
  bool has_thread_id() const;
  private:
  bool _internal_has_thread_id() const;
  public:
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:logging.LogRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::logging::LogRecord_Heartbeat* heartbeat_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_logrecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogRecord_Heartbeat

// required string hostname = 1;
inline bool LogRecord_Heartbeat::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_hostname() const {
  return _internal_has_hostname();
}
inline void LogRecord_Heartbeat::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogRecord_Heartbeat::hostname() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.hostname)
  return _internal_hostname();
}
inline void LogRecord_Heartbeat::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.hostname)
}
inline std::string* LogRecord_Heartbeat::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& LogRecord_Heartbeat::_internal_hostname() const {
  return hostname_.Get();
}
inline void LogRecord_Heartbeat::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogRecord_Heartbeat::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logging.LogRecord.Heartbeat.hostname)
}
inline void LogRecord_Heartbeat::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.hostname)
}
inline void LogRecord_Heartbeat::set_hostname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.hostname)
}
inline std::string* LogRecord_Heartbeat::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogRecord_Heartbeat::release_hostname() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogRecord_Heartbeat::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.hostname)
}
inline std::string* LogRecord_Heartbeat::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:logging.LogRecord.Heartbeat.hostname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogRecord_Heartbeat::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logging.LogRecord.Heartbeat.hostname)
}

// required string process_name = 2;
inline bool LogRecord_Heartbeat::_internal_has_process_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_process_name() const {
  return _internal_has_process_name();
}
inline void LogRecord_Heartbeat::clear_process_name() {
  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogRecord_Heartbeat::process_name() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_name)
  return _internal_process_name();
}
inline void LogRecord_Heartbeat::set_process_name(const std::string& value) {
  _internal_set_process_name(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_name)
}
inline std::string* LogRecord_Heartbeat::mutable_process_name() {
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.process_name)
  return _internal_mutable_process_name();
}
inline const std::string& LogRecord_Heartbeat::_internal_process_name() const {
  return process_name_.Get();
}
inline void LogRecord_Heartbeat::_internal_set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogRecord_Heartbeat::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logging.LogRecord.Heartbeat.process_name)
}
inline void LogRecord_Heartbeat::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.process_name)
}
inline void LogRecord_Heartbeat::set_process_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.process_name)
}
inline std::string* LogRecord_Heartbeat::_internal_mutable_process_name() {
  _has_bits_[0] |= 0x00000002u;
  return process_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogRecord_Heartbeat::release_process_name() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.process_name)
  if (!_internal_has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return process_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogRecord_Heartbeat::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.process_name)
}
inline std::string* LogRecord_Heartbeat::unsafe_arena_release_process_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:logging.LogRecord.Heartbeat.process_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return process_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogRecord_Heartbeat::unsafe_arena_set_allocated_process_name(
    std::string* process_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      process_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logging.LogRecord.Heartbeat.process_name)
}

// required int32 process_id = 3;
inline bool LogRecord_Heartbeat::_internal_has_process_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_process_id() const {
  return _internal_has_process_id();
}
inline void LogRecord_Heartbeat::clear_process_id() {
  process_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRecord_Heartbeat::_internal_process_id() const {
  return process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRecord_Heartbeat::process_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_id)
  return _internal_process_id();
}
inline void LogRecord_Heartbeat::_internal_set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  process_id_ = value;
}
inline void LogRecord_Heartbeat::set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_id)
}

// required int64 process_start_time = 4;
inline bool LogRecord_Heartbeat::_internal_has_process_start_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_process_start_time() const {
  return _internal_has_process_start_time();
}
inline void LogRecord_Heartbeat::clear_process_start_time() {
  process_start_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogRecord_Heartbeat::_internal_process_start_time() const {
  return process_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogRecord_Heartbeat::process_start_time() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.process_start_time)
  return _internal_process_start_time();
}
inline void LogRecord_Heartbeat::_internal_set_process_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  process_start_time_ = value;
}
inline void LogRecord_Heartbeat::set_process_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_process_start_time(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.process_start_time)
}

// required string username = 5;
inline bool LogRecord_Heartbeat::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogRecord_Heartbeat::has_username() const {
  return _internal_has_username();
}
inline void LogRecord_Heartbeat::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogRecord_Heartbeat::username() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.Heartbeat.username)
  return _internal_username();
}
inline void LogRecord_Heartbeat::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.Heartbeat.username)
}
inline std::string* LogRecord_Heartbeat::mutable_username() {
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.Heartbeat.username)
  return _internal_mutable_username();
}
inline const std::string& LogRecord_Heartbeat::_internal_username() const {
  return username_.Get();
}
inline void LogRecord_Heartbeat::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogRecord_Heartbeat::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logging.LogRecord.Heartbeat.username)
}
inline void LogRecord_Heartbeat::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.Heartbeat.username)
}
inline void LogRecord_Heartbeat::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.Heartbeat.username)
}
inline std::string* LogRecord_Heartbeat::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000004u;
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogRecord_Heartbeat::release_username() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.Heartbeat.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogRecord_Heartbeat::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.Heartbeat.username)
}
inline std::string* LogRecord_Heartbeat::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:logging.LogRecord.Heartbeat.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogRecord_Heartbeat::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logging.LogRecord.Heartbeat.username)
}

// -------------------------------------------------------------------

// LogRecord

// optional .logging.LogRecord.Heartbeat heartbeat = 1;
inline bool LogRecord::_internal_has_heartbeat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || heartbeat_ != nullptr);
  return value;
}
inline bool LogRecord::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void LogRecord::clear_heartbeat() {
  if (heartbeat_ != nullptr) heartbeat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::logging::LogRecord_Heartbeat& LogRecord::_internal_heartbeat() const {
  const ::logging::LogRecord_Heartbeat* p = heartbeat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::logging::LogRecord_Heartbeat*>(
      &::logging::_LogRecord_Heartbeat_default_instance_);
}
inline const ::logging::LogRecord_Heartbeat& LogRecord::heartbeat() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.heartbeat)
  return _internal_heartbeat();
}
inline void LogRecord::unsafe_arena_set_allocated_heartbeat(
    ::logging::LogRecord_Heartbeat* heartbeat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_);
  }
  heartbeat_ = heartbeat;
  if (heartbeat) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logging.LogRecord.heartbeat)
}
inline ::logging::LogRecord_Heartbeat* LogRecord::release_heartbeat() {
  auto temp = unsafe_arena_release_heartbeat();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.heartbeat)
  _has_bits_[0] &= ~0x00000002u;
  ::logging::LogRecord_Heartbeat* temp = heartbeat_;
  heartbeat_ = nullptr;
  return temp;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::_internal_mutable_heartbeat() {
  _has_bits_[0] |= 0x00000002u;
  if (heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::logging::LogRecord_Heartbeat>(GetArena());
    heartbeat_ = p;
  }
  return heartbeat_;
}
inline ::logging::LogRecord_Heartbeat* LogRecord::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.heartbeat)
  return _internal_mutable_heartbeat();
}
inline void LogRecord::set_allocated_heartbeat(::logging::LogRecord_Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heartbeat_;
  }
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.heartbeat)
}

// required int32 level = 2;
inline bool LogRecord::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogRecord::has_level() const {
  return _internal_has_level();
}
inline void LogRecord::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRecord::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRecord::level() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.level)
  return _internal_level();
}
inline void LogRecord::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void LogRecord::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.level)
}

// required int32 thread_id = 3;
inline bool LogRecord::_internal_has_thread_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LogRecord::has_thread_id() const {
  return _internal_has_thread_id();
}
inline void LogRecord::clear_thread_id() {
  thread_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRecord::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogRecord::thread_id() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.thread_id)
  return _internal_thread_id();
}
inline void LogRecord::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  thread_id_ = value;
}
inline void LogRecord::set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.thread_id)
}

// required int64 timestamp = 4;
inline bool LogRecord::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LogRecord::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void LogRecord::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogRecord::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.timestamp)
  return _internal_timestamp();
}
inline void LogRecord::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void LogRecord::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.timestamp)
}

// required string message = 5;
inline bool LogRecord::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogRecord::has_message() const {
  return _internal_has_message();
}
inline void LogRecord::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogRecord::message() const {
  // @@protoc_insertion_point(field_get:logging.LogRecord.message)
  return _internal_message();
}
inline void LogRecord::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:logging.LogRecord.message)
}
inline std::string* LogRecord::mutable_message() {
  // @@protoc_insertion_point(field_mutable:logging.LogRecord.message)
  return _internal_mutable_message();
}
inline const std::string& LogRecord::_internal_message() const {
  return message_.Get();
}
inline void LogRecord::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogRecord::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:logging.LogRecord.message)
}
inline void LogRecord::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:logging.LogRecord.message)
}
inline void LogRecord::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:logging.LogRecord.message)
}
inline std::string* LogRecord::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogRecord::release_message() {
  // @@protoc_insertion_point(field_release:logging.LogRecord.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogRecord::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:logging.LogRecord.message)
}
inline std::string* LogRecord::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:logging.LogRecord.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogRecord::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:logging.LogRecord.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logrecord_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sudoku.proto

#include "sudoku.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sudoku {
class SudokuRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SudokuRequest> _instance;
} _SudokuRequest_default_instance_;
class SudokuResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SudokuResponse> _instance;
} _SudokuResponse_default_instance_;
}  // namespace sudoku
static void InitDefaultsscc_info_SudokuRequest_sudoku_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sudoku::_SudokuRequest_default_instance_;
    new (ptr) ::sudoku::SudokuRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sudoku::SudokuRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SudokuRequest_sudoku_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SudokuRequest_sudoku_2eproto}, {}};

static void InitDefaultsscc_info_SudokuResponse_sudoku_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sudoku::_SudokuResponse_default_instance_;
    new (ptr) ::sudoku::SudokuResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sudoku::SudokuResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SudokuResponse_sudoku_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SudokuResponse_sudoku_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sudoku_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sudoku_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_sudoku_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sudoku_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuRequest, checkerboard_),
  0,
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, solved_),
  PROTOBUF_FIELD_OFFSET(::sudoku::SudokuResponse, checkerboard_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::sudoku::SudokuRequest)},
  { 7, 14, sizeof(::sudoku::SudokuResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sudoku::_SudokuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sudoku::_SudokuResponse_default_instance_),
};

const char descriptor_table_protodef_sudoku_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sudoku.proto\022\006sudoku\"%\n\rSudokuRequest\022"
  "\024\n\014checkerboard\030\001 \002(\t\"=\n\016SudokuResponse\022"
  "\025\n\006solved\030\001 \001(\010:\005false\022\024\n\014checkerboard\030\002"
  " \001(\t2G\n\rSudokuService\0226\n\005Solve\022\025.sudoku."
  "SudokuRequest\032\026.sudoku.SudokuResponseB\t\200"
  "\001\001\210\001\001\220\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sudoku_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sudoku_2eproto_sccs[2] = {
  &scc_info_SudokuRequest_sudoku_2eproto.base,
  &scc_info_SudokuResponse_sudoku_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sudoku_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sudoku_2eproto = {
  false, false, descriptor_table_protodef_sudoku_2eproto, "sudoku.proto", 208,
  &descriptor_table_sudoku_2eproto_once, descriptor_table_sudoku_2eproto_sccs, descriptor_table_sudoku_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_sudoku_2eproto::offsets,
  file_level_metadata_sudoku_2eproto, 2, file_level_enum_descriptors_sudoku_2eproto, file_level_service_descriptors_sudoku_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sudoku_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sudoku_2eproto)), true);
namespace sudoku {

// ===================================================================

void SudokuRequest::InitAsDefaultInstance() {
}
class SudokuRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SudokuRequest>()._has_bits_);
  static void set_has_checkerboard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SudokuRequest::SudokuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sudoku.SudokuRequest)
}
SudokuRequest::SudokuRequest(const SudokuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkerboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_checkerboard()) {
    checkerboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkerboard(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sudoku.SudokuRequest)
}

void SudokuRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SudokuRequest_sudoku_2eproto.base);
  checkerboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SudokuRequest::~SudokuRequest() {
  // @@protoc_insertion_point(destructor:sudoku.SudokuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SudokuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  checkerboard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SudokuRequest::ArenaDtor(void* object) {
  SudokuRequest* _this = reinterpret_cast< SudokuRequest* >(object);
  (void)_this;
}
void SudokuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SudokuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SudokuRequest& SudokuRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SudokuRequest_sudoku_2eproto.base);
  return *internal_default_instance();
}


void SudokuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sudoku.SudokuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    checkerboard_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SudokuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string checkerboard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_checkerboard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sudoku.SudokuRequest.checkerboard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SudokuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sudoku.SudokuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string checkerboard = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_checkerboard().data(), static_cast<int>(this->_internal_checkerboard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sudoku.SudokuRequest.checkerboard");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_checkerboard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sudoku.SudokuRequest)
  return target;
}

size_t SudokuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sudoku.SudokuRequest)
  size_t total_size = 0;

  // required string checkerboard = 1;
  if (_internal_has_checkerboard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkerboard());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SudokuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sudoku.SudokuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SudokuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SudokuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sudoku.SudokuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sudoku.SudokuRequest)
    MergeFrom(*source);
  }
}

void SudokuRequest::MergeFrom(const SudokuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sudoku.SudokuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_checkerboard()) {
    _internal_set_checkerboard(from._internal_checkerboard());
  }
}

void SudokuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sudoku.SudokuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SudokuRequest::CopyFrom(const SudokuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sudoku.SudokuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudokuRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SudokuRequest::InternalSwap(SudokuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  checkerboard_.Swap(&other->checkerboard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SudokuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SudokuResponse::InitAsDefaultInstance() {
}
class SudokuResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SudokuResponse>()._has_bits_);
  static void set_has_solved(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_checkerboard(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SudokuResponse::SudokuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sudoku.SudokuResponse)
}
SudokuResponse::SudokuResponse(const SudokuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkerboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_checkerboard()) {
    checkerboard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checkerboard(),
      GetArena());
  }
  solved_ = from.solved_;
  // @@protoc_insertion_point(copy_constructor:sudoku.SudokuResponse)
}

void SudokuResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SudokuResponse_sudoku_2eproto.base);
  checkerboard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solved_ = false;
}

SudokuResponse::~SudokuResponse() {
  // @@protoc_insertion_point(destructor:sudoku.SudokuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SudokuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  checkerboard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SudokuResponse::ArenaDtor(void* object) {
  SudokuResponse* _this = reinterpret_cast< SudokuResponse* >(object);
  (void)_this;
}
void SudokuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SudokuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SudokuResponse& SudokuResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SudokuResponse_sudoku_2eproto.base);
  return *internal_default_instance();
}


void SudokuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sudoku.SudokuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    checkerboard_.ClearNonDefaultToEmpty();
  }
  solved_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SudokuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool solved = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_solved(&has_bits);
          solved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string checkerboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_checkerboard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sudoku.SudokuResponse.checkerboard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SudokuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sudoku.SudokuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool solved = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_solved(), target);
  }

  // optional string checkerboard = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_checkerboard().data(), static_cast<int>(this->_internal_checkerboard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sudoku.SudokuResponse.checkerboard");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkerboard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sudoku.SudokuResponse)
  return target;
}

size_t SudokuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sudoku.SudokuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string checkerboard = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_checkerboard());
    }

    // optional bool solved = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SudokuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sudoku.SudokuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SudokuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SudokuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sudoku.SudokuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sudoku.SudokuResponse)
    MergeFrom(*source);
  }
}

void SudokuResponse::MergeFrom(const SudokuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sudoku.SudokuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_checkerboard(from._internal_checkerboard());
    }
    if (cached_has_bits & 0x00000002u) {
      solved_ = from.solved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SudokuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sudoku.SudokuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SudokuResponse::CopyFrom(const SudokuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sudoku.SudokuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SudokuResponse::IsInitialized() const {
  return true;
}

void SudokuResponse::InternalSwap(SudokuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  checkerboard_.Swap(&other->checkerboard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(solved_, other->solved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SudokuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SudokuService::~SudokuService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SudokuService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sudoku_2eproto);
  return file_level_service_descriptors_sudoku_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SudokuService::GetDescriptor() {
  return descriptor();
}

void SudokuService::Solve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sudoku::SudokuRequest*,
                         ::sudoku::SudokuResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Solve() not implemented.");
  done->Run();
}

void SudokuService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_sudoku_2eproto[0]);
  switch(method->index()) {
    case 0:
      Solve(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sudoku::SudokuRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sudoku::SudokuResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SudokuService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sudoku::SudokuRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SudokuService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sudoku::SudokuResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SudokuService_Stub::SudokuService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SudokuService_Stub::SudokuService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SudokuService_Stub::~SudokuService_Stub() {
  if (owns_channel_) delete channel_;
}

void SudokuService_Stub::Solve(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sudoku::SudokuRequest* request,
                              ::sudoku::SudokuResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sudoku
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sudoku::SudokuRequest* Arena::CreateMaybeMessage< ::sudoku::SudokuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sudoku::SudokuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sudoku::SudokuResponse* Arena::CreateMaybeMessage< ::sudoku::SudokuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sudoku::SudokuResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
